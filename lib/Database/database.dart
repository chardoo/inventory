import 'package:drift/drift.dart';
import 'package:flutter/material.dart' show Colors;
import 'package:inventory/Database/Tables/Customer.dart';
import 'package:inventory/Database/Tables/Product.dart';
import 'package:inventory/Database/Tables/User.dart';
import 'package:riverpod/riverpod.dart';

import 'connection/connection.dart' as impl;

// Manually generated by `drift_dev schema steps` - this file makes writing
// migrations easier. See this for details:
// https://drift.simonbinder.eu/docs/advanced-features/migrations/#step-by-step
import 'schema_versions.dart';

// Generated by drift_dev when running `build_runner build`
part 'database.g.dart';

@DriftDatabase(tables: [Customers, Users, Products, ], include: {'sql.drift'})
class AppDatabase extends _$AppDatabase {
  
  
  AppDatabase() : super(impl.connect());

  AppDatabase.forTesting(DatabaseConnection connection) : super(connection);

  @override
  int get schemaVersion => 3;

  @override
  MigrationStrategy get migration {
    return MigrationStrategy(
      onCreate: (Migrator m) async {
        await m.createAll();
      },
      onUpgrade: stepByStep(
        from1To2: (m, schema) async {
          // Add the upgrade steps when you increase the schema version
        },
        from2To3: (m, schema) async {
          // Add the upgrade steps when you increase the schema version
        },
      ),
      beforeOpen: (details) async {
        // Make sure that foreign keys are enabled
        await customStatement('PRAGMA foreign_keys = ON');
      },
    );
  }

  // Implement methods to interact with the database

  static final StateProvider<AppDatabase> provider = StateProvider((ref) {
    final database = AppDatabase();
    ref.onDispose(database.close);

    return database;
  });
}
